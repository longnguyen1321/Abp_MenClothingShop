<div class="card">
    <div class = "card-header">
        <div class = "row">
            <div class = "col col-md-6">
                <h5 class = "card-title">
                    {{ '::Menu:Clothes' | abpLocalization }}
                </h5>
            </div>
            
        </div>
    </div>

    <div class="card-body">
        <ngx-datatable [rows]="clotheList.items" [count]="clotheList.totalCount" [list]="list" default>
            <ngx-datatable-column [name] = "'::TenMH' | abpLocalization" prop="tenMH"></ngx-datatable-column>
            <ngx-datatable-column [name] = "'::SizeMH' | abpLocalization" prop = "sizeMH"></ngx-datatable-column>
            <ngx-datatable-column [name] = "'::TonKho' | abpLocalization" prop = "tonKho"></ngx-datatable-column>
            <ngx-datatable-column [name] = "'::SLTonKhoToiThieu' | abpLocalization" prop = "slTonKhoToiThieu"></ngx-datatable-column>
            <ngx-datatable-column [name]="'::Action' | abpLocalization" [maxWidth]="150" [sortable]="false">
                <ng-template let-row="row" ngx-datatable-cell-template>
                    <button (click)="addClothe(row.id)">
                        {{ '::Add' | abpLocalization }}
                    </button>
                </ng-template>
            </ngx-datatable-column>
            <ngx-datatable-column [name]="'::Action' | abpLocalization" [maxWidth]="150" [sortable]="false">
                <ng-template let-row="row" ngx-datatable-cell-template>
                    <button (click)="editClothe(row.id)">
                        {{ '::Edit' | abpLocalization }}
                    </button>
                </ng-template>
            </ngx-datatable-column>
            <ngx-datatable-column [name]="'::Action' | abpLocalization" [maxWidth]="150" [sortable]="false">
                <ng-template let-row="row" ngx-datatable-cell-template>
                    <button (click)="deleteClothe(row.id)">
                        {{ '::Delete' | abpLocalization }}
                    </button>
                </ng-template>
            </ngx-datatable-column>
        </ngx-datatable>
    </div>

    <div class="card-footer">
        <button (click)="createImport()">Tạo phiếu nhập</button>
    </div>
</div>

<abp-modal [(visible)]="isModalOpen">
    <ng-template #abpHeader>
        <h3>{{ (action == "edit" ? '::Edit' : '::Add') | abpLocalization }}</h3>
    </ng-template>

    <ng-template #abpBody> 
        <form [formGroup]="form" (ngSubmit)="save()">
            <div class="form-group">
                <label for="clothe-name">Tên</label><span> * </span>
                <input type="text" id="clothe-name" class="form-control" formControlName="tenMH" autofocus />
            </div>
            <div class="form-group">
                <label for="clothe-size">Kích cỡ</label><span> * </span>
                <input type="text" id="clothe-size" class="form-control" formControlName="sizeMH" />
            </div>
            <div class="form-group">
                <label for="import-quantity">Số lượng nhập</label><span> * </span>
                <input type="number" id="import-quantity" class="form-control" formControlName="soLuongNhap" />
            </div>
            <div class="form-group">
                <label for="import-price">Giá nhập</label><span> * </span>
                <input type="number" id="import-price" class="form-control" formControlName="giaNhap" />
            </div>
        </form>
    </ng-template>

    <ng-template #abpFooter>
        <button type="button" class="btn btn-secondary" abpClose>
          {{ '::Close' | abpLocalization }}
        </button>
  
        <button class="btn-primary" (click)="save()" [disabled]="form.invalid">
          <i class="fa fa-check mr-1"></i>
          {{ '::Save' | abpLocalization }}
        </button>
      </ng-template>
</abp-modal>


import { ListResultDto, ListService, PagedResultDto } from '@abp/ng.core';
import { ConfirmationService } from '@abp/ng.theme.shared';
import { query } from '@angular/animations';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ClotheDto, ClotheService } from '@proxy/clothes';
import { ImportDetailService } from '@proxy/imports';
import { CreateImportDto, CreateManyImportDetailsDto, ImportClotheListDto, SelectedClotheList } from '@proxy/imports/models';

@Component({
  selector: 'app-import',
  templateUrl: './import.component.html',
  styleUrls: ['./import.component.scss'],
  providers: [ListService],
})
export class ImportComponent implements OnInit {
  clotheList = { items: [], totalCount: 0 } as PagedResultDto<ImportClotheListDto>;
  selectedClothe = { } as ClotheDto;

  selectedClothesList = {} as CreateManyImportDetailsDto;

  selectedImportClothe = {} as SelectedClotheList;
  selectedImportClotheList = [];
  action = null;
  form: FormGroup;

  isModalOpen = false;

  constructor(private importDetailService: ImportDetailService, public readonly list: ListService, private fb: FormBuilder, private confirmation: ConfirmationService, private clotheService: ClotheService) { }

  ngOnInit(): void {
    const clotheStreamCreator = (query) => this.importDetailService.getClotheListByInput(query);

    this.list.hookToQuery(clotheStreamCreator).subscribe((response) => {
      this.clotheList = response;
    });
  }

  addClothe(id: string){
    this.clotheService.get(id).subscribe((clothe) => {
      this.selectedClothe = clothe;
      this.action = "add";
      this.buildForm();
      this.isModalOpen = true;
      this.action = null;
    })
  }

  editClothe(id: string){
    this.clotheService.get(id).subscribe((clothe) => {
      this.selectedClothe = clothe;
      this.action = "edit";
      this.buildForm();
      this.isModalOpen = true;
      this.action = null;
    })
  }

  deleteClothe(id: string){

  }

  addToList(){
    array.forEach(element => {
      
    });this.selectedImportClotheList.find(x => x.t)
    this.selectedImportClotheList.push()
  }

  deleteFromList(){

  }

  buildForm(){
    this.form = this.fb.group({
      tenMH: [this.selectedClothe.tenMH, Validators.required],
      sizeMH: [this.selectedClothe.sizeMH || '', Validators.required],
      soLuongNhap: [0 || '', Validators.required, Validators.min(0)],
      giaNhap: [0 || '', Validators.required, Validators.min(0)] 
    });
  }

  save(){
    if (this.form.invalid) {
      return;
    }

    this.action == "add" ? this.selectedClothesList.push({this.form.value(x=>x.tenMH), this.}) : this.selectedClothesList.pop();
  }
}
